---
# Variables for flexibility
- name: Set variables for firewalld
  vars:
    allowed_services:
      - ssh
      - http
      - https
    firewalld_zone: ztna_drop

# Uninstall UFW if the system is Debian-based
- name: Uninstall UFW
  apt:
    name: ufw
    state: absent
  when: ansible_os_family == "Debian"

# Install firewalld on Debian-based systems
- name: Install firewalld (Debian)
  apt:
    name: firewalld
    state: present
  when: ansible_os_family == "Debian"

# Install firewalld on RedHat/CentOS-based systems
- name: Install firewalld (RedHat/CentOS)
  yum:
    name: firewalld
    state: present
  when: ansible_os_family == "RedHat"

# Ensure firewalld is running and enabled on boot
- name: Ensure firewalld is running and enabled
  service:
    name: firewalld
    state: started
    enabled: yes
  retries: 3
  delay: 5

# Check if the ztna_drop zone exists
- name: Check if {{ firewalld_zone }} zone exists
  command: firewall-cmd --get-zones
  register: firewalld_zones
  changed_when: false

- name: Ensure {{ firewalld_zone }} zone exists
  firewalld:
    zone: "{{ firewalld_zone }}"
    state: present
    permanent: yes
  when: firewalld_zone not in firewalld_zones.stdout.split()
  notify: Restart Firewalld

# Set the default zone to ztna_drop
- name: Set default zone to {{ firewalld_zone }}
  firewalld:
    default_zone: "{{ firewalld_zone }}"
  notify: Restart Firewalld

# Get the current list of services in the ztna_drop zone
- name: Get list of all services in {{ firewalld_zone }} zone
  command: firewall-cmd --zone={{ firewalld_zone }} --list-services
  register: ztna_drop_services
  changed_when: false

# Enable allowed services in the ztna_drop zone
- name: Enable allowed services in {{ firewalld_zone }} zone
  firewalld:
    zone: "{{ firewalld_zone }}"
    service: "{{ item }}"
    state: enabled
    permanent: yes
  loop: "{{ allowed_services | difference(ztna_drop_services.stdout.split()) }}"
  when: ztna_drop_services.stdout is defined
  notify: Restart Firewalld

# Disable unauthorized services in the ztna_drop zone
- name: Disable unauthorized services in {{ firewalld_zone }} zone
  firewalld:
    zone: "{{ firewalld_zone }}"
    service: "{{ item }}"
    state: disabled
    permanent: yes
  loop: "{{ ztna_drop_services.stdout.split() | difference(allowed_services) }}"
  when: ztna_drop_services.stdout is defined
  notify: Restart Firewalld

# Check the current target of the ztna_drop zone
- name: Get current target of {{ firewalld_zone }} zone
  command: firewall-cmd --zone={{ firewalld_zone }} --get-target
  register: ztna_drop_target
  changed_when: false

# Set default target to DROP in ztna_drop zone
- name: Set default target to DROP in {{ firewalld_zone }} zone
  firewalld:
    zone: "{{ firewalld_zone }}"
    target: DROP
    state: enabled
    permanent: yes
  when: ztna_drop_target.stdout != "DROP"
  notify: Restart Firewalld

# Restart firewalld to apply permanent rules to runtime
- name: Restart firewalld
  service:
    name: firewalld
    state: restarted
  listen: Restart Firewalld

# Configure Fail2Ban jail for SSH protection
- name: Configure Fail2Ban jail for SSH
  lineinfile:
    path: /etc/fail2ban/jail.local
    regexp: "^\\[sshd\\]"
    line: |
      [sshd]
      enabled = true
      port = ssh
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3
      bantime = 900
  notify: Restart Fail2Ban

# Ensure Fail2Ban is running and enabled on boot
- name: Ensure Fail2Ban is running and enabled
  service:
    name: fail2ban
    state: started
    enabled: yes
  retries: 3
  delay: 5

# Restart Fail2Ban service
- name: Restart Fail2Ban
  service:
    name: fail2ban
    state: restarted
  listen: Restart Fail2Ban